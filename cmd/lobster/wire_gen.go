// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/blackhorseya/lobster/internal/app/lobster"
	"github.com/blackhorseya/lobster/internal/app/lobster/apis"
	health2 "github.com/blackhorseya/lobster/internal/app/lobster/apis/health"
	task2 "github.com/blackhorseya/lobster/internal/app/lobster/apis/task"
	"github.com/blackhorseya/lobster/internal/app/lobster/biz"
	"github.com/blackhorseya/lobster/internal/app/lobster/biz/health"
	"github.com/blackhorseya/lobster/internal/app/lobster/biz/health/repo"
	"github.com/blackhorseya/lobster/internal/app/lobster/biz/task"
	repo2 "github.com/blackhorseya/lobster/internal/app/lobster/biz/task/repo"
	"github.com/blackhorseya/lobster/internal/pkg/app"
	"github.com/blackhorseya/lobster/internal/pkg/entity/config"
	"github.com/blackhorseya/lobster/internal/pkg/infra/databases"
	"github.com/blackhorseya/lobster/internal/pkg/infra/idgen"
	"github.com/blackhorseya/lobster/internal/pkg/infra/log"
	"github.com/blackhorseya/lobster/internal/pkg/infra/token"
	"github.com/blackhorseya/lobster/internal/pkg/infra/transports/http"
	"github.com/google/wire"
)

// Injectors from wire.go:

// CreateApp serve caller to create an injector
func CreateApp(path2 string, nodeID int64) (*app.Application, error) {
	viper, err := config.New(path2)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	lobsterOptions, err := lobster.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	databasesOptions, err := databases.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	db, err := databases.NewMariaDB(databasesOptions)
	if err != nil {
		return nil, err
	}
	iRepo := repo.NewImpl(db)
	iBiz := health.NewImpl(logger, iRepo)
	iHandler := health2.NewImpl(logger, iBiz)
	repoIRepo := repo2.NewImpl(db)
	node, err := idgen.New(nodeID)
	if err != nil {
		return nil, err
	}
	taskIBiz := task.NewImpl(logger, repoIRepo, node)
	taskIHandler := task2.NewImpl(logger, taskIBiz)
	initHandlers := apis.CreateInitHandlerFn(iHandler, taskIHandler)
	engine := http.NewRouter(httpOptions, logger, initHandlers)
	server, err := http.New(httpOptions, logger, engine)
	if err != nil {
		return nil, err
	}
	application, err := lobster.New(lobsterOptions, logger, server)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(lobster.ProviderSet, log.ProviderSet, idgen.ProviderSet, config.ProviderSet, http.ProviderSet, databases.ProviderSet, token.ProviderSet, apis.ProviderSet, biz.ProviderSet)
