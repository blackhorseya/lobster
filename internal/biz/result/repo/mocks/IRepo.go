// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/lobster/internal/pkg/contextx"
	mock "github.com/stretchr/testify/mock"

	pb "github.com/blackhorseya/lobster/internal/pkg/pb"
)

// IRepo is an autogenerated mock type for the IRepo type
type IRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, created
func (_m *IRepo) Create(ctx contextx.Contextx, created *pb.Result) (*pb.Result, error) {
	ret := _m.Called(ctx, created)

	var r0 *pb.Result
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *pb.Result) *pb.Result); ok {
		r0 = rf(ctx, created)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *pb.Result) error); ok {
		r1 = rf(ctx, created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *IRepo) Delete(ctx contextx.Contextx, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryByGoalID provides a mock function with given fields: ctx, id
func (_m *IRepo) QueryByGoalID(ctx contextx.Contextx, id string) ([]*pb.Result, error) {
	ret := _m.Called(ctx, id)

	var r0 []*pb.Result
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) []*pb.Result); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryByID provides a mock function with given fields: ctx, id
func (_m *IRepo) QueryByID(ctx contextx.Contextx, id string) (*pb.Result, error) {
	ret := _m.Called(ctx, id)

	var r0 *pb.Result
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) *pb.Result); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryList provides a mock function with given fields: ctx, offset, limit
func (_m *IRepo) QueryList(ctx contextx.Contextx, offset int, limit int) ([]*pb.Result, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []*pb.Result
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int, int) []*pb.Result); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, updated
func (_m *IRepo) Update(ctx contextx.Contextx, updated *pb.Result) (*pb.Result, error) {
	ret := _m.Called(ctx, updated)

	var r0 *pb.Result
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *pb.Result) *pb.Result); ok {
		r0 = rf(ctx, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *pb.Result) error); ok {
		r1 = rf(ctx, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
