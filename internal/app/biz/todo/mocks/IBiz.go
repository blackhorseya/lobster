// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/lobster/internal/pkg/contextx"
	biztodo "github.com/blackhorseya/lobster/internal/pkg/entities/biz/todo"

	mock "github.com/stretchr/testify/mock"
)

// IBiz is an autogenerated mock type for the IBiz type
type IBiz struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx
func (_m *IBiz) Count(ctx contextx.Contextx) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(contextx.Contextx) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, task
func (_m *IBiz) Create(ctx contextx.Contextx, task *biztodo.Task) (*biztodo.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *biztodo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *biztodo.Task) *biztodo.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biztodo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *biztodo.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *IBiz) Delete(ctx contextx.Contextx, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IBiz) GetByID(ctx contextx.Contextx, id string) (*biztodo.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *biztodo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) *biztodo.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biztodo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, page, size
func (_m *IBiz) List(ctx contextx.Contextx, page int, size int) ([]*biztodo.Task, error) {
	ret := _m.Called(ctx, page, size)

	var r0 []*biztodo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int, int) []*biztodo.Task); ok {
		r0 = rf(ctx, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*biztodo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int, int) error); ok {
		r1 = rf(ctx, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, updated
func (_m *IBiz) Update(ctx contextx.Contextx, updated *biztodo.Task) (*biztodo.Task, error) {
	ret := _m.Called(ctx, updated)

	var r0 *biztodo.Task
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *biztodo.Task) *biztodo.Task); ok {
		r0 = rf(ctx, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biztodo.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *biztodo.Task) error); ok {
		r1 = rf(ctx, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
