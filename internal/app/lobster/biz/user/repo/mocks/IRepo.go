// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	contextx "github.com/blackhorseya/lobster/internal/pkg/base/contextx"
	mock "github.com/stretchr/testify/mock"

	user "github.com/blackhorseya/lobster/internal/pkg/entity/user"
)

// IRepo is an autogenerated mock type for the IRepo type
type IRepo struct {
	mock.Mock
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *IRepo) GetByEmail(ctx contextx.Contextx, email string) (*user.Profile, error) {
	ret := _m.Called(ctx, email)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) *user.Profile); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IRepo) GetByID(ctx contextx.Contextx, id int64) (*user.Profile, error) {
	ret := _m.Called(ctx, id)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int64) *user.Profile); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *IRepo) GetByToken(ctx contextx.Contextx, token string) (*user.Profile, error) {
	ret := _m.Called(ctx, token)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) *user.Profile); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, newUser
func (_m *IRepo) Register(ctx contextx.Contextx, newUser *user.Profile) (*user.Profile, error) {
	ret := _m.Called(ctx, newUser)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *user.Profile) *user.Profile); ok {
		r0 = rf(ctx, newUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *user.Profile) error); ok {
		r1 = rf(ctx, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateToken provides a mock function with given fields: ctx, updated
func (_m *IRepo) UpdateToken(ctx contextx.Contextx, updated *user.Profile) (*user.Profile, error) {
	ret := _m.Called(ctx, updated)

	var r0 *user.Profile
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *user.Profile) *user.Profile); ok {
		r0 = rf(ctx, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *user.Profile) error); ok {
		r1 = rf(ctx, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
