// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	"github.com/blackhorseya/lobster/internal/pkg/entities/okr"
	contextx "github.com/blackhorseya/lobster/internal/pkg/utils/contextx"
	mock "github.com/stretchr/testify/mock"
)

// IBiz is an autogenerated mock type for the IBiz type
type IBiz struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *IBiz) Delete(ctx contextx.Contextx, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByGoalID provides a mock function with given fields: ctx, id
func (_m *IBiz) GetByGoalID(ctx contextx.Contextx, id string) ([]*okr.Result, error) {
	ret := _m.Called(ctx, id)

	var r0 []*okr.Result
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) []*okr.Result); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*okr.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IBiz) GetByID(ctx contextx.Contextx, id string) (*okr.Result, error) {
	ret := _m.Called(ctx, id)

	var r0 *okr.Result
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string) *okr.Result); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*okr.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkToGoal provides a mock function with given fields: ctx, created
func (_m *IBiz) LinkToGoal(ctx contextx.Contextx, created *okr.Result) (*okr.Result, error) {
	ret := _m.Called(ctx, created)

	var r0 *okr.Result
	if rf, ok := ret.Get(0).(func(contextx.Contextx, *okr.Result) *okr.Result); ok {
		r0 = rf(ctx, created)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*okr.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, *okr.Result) error); ok {
		r1 = rf(ctx, created)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, page, size
func (_m *IBiz) List(ctx contextx.Contextx, page int, size int) ([]*okr.Result, error) {
	ret := _m.Called(ctx, page, size)

	var r0 []*okr.Result
	if rf, ok := ret.Get(0).(func(contextx.Contextx, int, int) []*okr.Result); ok {
		r0 = rf(ctx, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*okr.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, int, int) error); ok {
		r1 = rf(ctx, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTitle provides a mock function with given fields: ctx, id, title
func (_m *IBiz) ModifyTitle(ctx contextx.Contextx, id string, title string) (*okr.Result, error) {
	ret := _m.Called(ctx, id, title)

	var r0 *okr.Result
	if rf, ok := ret.Get(0).(func(contextx.Contextx, string, string) *okr.Result); ok {
		r0 = rf(ctx, id, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*okr.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(contextx.Contextx, string, string) error); ok {
		r1 = rf(ctx, id, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
